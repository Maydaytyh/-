int  n,m,s,t,maxflow,tot=1,head[maxn],cur[maxn],h[maxn],q[maxn];
struct edge{int go,next,v;}e[maxm];
void ins(int x,int y,int z){e[++tot].go=y;e[tot].v=z;e[tot].next=head[x];head[x]=tot;}
void insert(int x,int y,int z){ins(x,y,z);ins(y,x,0);}
bool bfs()
{
    mem(h,-1);
    int l=0,r=1;q[1]=s;h[s]=0;
    while(l<r)
    {
        int x=q[++l];
        for(int i=head[x];i;i=e[i].next)
         if(e[i].v&&h[e[i].go]==-1)
         {
            h[e[i].go]=h[x]+1;q[++r]=e[i].go;
         }
    }
    return h[t]!=-1;
}
int dfs(int x,int f)
{
    if(x==t) return f;
    int tmp,used=0;
    for(int i=head[x];i;i=e[i].next)
     if(e[i].v&&h[e[i].go]==h[x]+1)
    {
        tmp=dfs(e[i].go,min(e[i].v,f-used));
        e[i].v-=tmp;if(e[i].v)cur[x]=i;
        e[i^1].v+=tmp;used+=tmp;
        if(used==f)return f;       
    }
    if(!used) h[x]=-1;
    return used;
}
void dinic()
{
    maxflow=0;
    while(bfs())
    {
        for (int i=s;i<=t;i++)cur[i]=head[i];maxflow+=dfs(s,INF);
    }
}
void init()
{
   mem(head,0);
   mem(h,-1);
   tot=1;
}
int main() {
    
}